generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SurveyLink {
  id          Int       @id @default(autoincrement())
  uniqueCode  String    @unique
  clientName  String
  companyName String
  createdAt   DateTime  @default(now())
  response    SurveyResponse?
}

model SurveyResponse {
  id                Int         @id @default(autoincrement())
  linkId            Int         @unique
  link              SurveyLink  @relation(fields: [linkId], references: [id])
  nps               Int?
  satisfaction      Int?
  communication     Int?
  whatWeDidWell     String?     @db.Text
  whatWeCanImprove  String?     @db.Text
  completed         Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Employee Data Models
model Employee {
  id            String    @id @default(cuid())
  employeeId    String    @unique // External ID from Hailey HR
  firstName     String
  lastName      String
  email         String?
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([startDate, endDate])
  @@index([isActive])
}

model EmployeeDataSync {
  id            String    @id @default(cuid())
  syncDate      DateTime  @default(now())
  success       Boolean
  message       String?   @db.Text
  recordsAdded  Int       @default(0)
  recordsUpdated Int      @default(0)
  apiKeyStatus  String    @default("unknown")
  apiKeyExpiry  DateTime?

  @@index([syncDate])
}